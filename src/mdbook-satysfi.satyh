@require: math
@require: color
@require: gr
@require: annot
@require: itemize
@require: code
@require: vdecoset

@require: base/list-ext
@require: base/option-ext
@require: base/ord
@require: base/float
@require: base/length
@require: easytable/easytable
@require: quotation/quotation
@require: uline/uline
@require: ruby/ruby


module MdBookSATySFi : sig

  val document: 'a -> block-text -> document
    constraint 'a :: (|
      title : inline-text;
      authors : inline-text list;
      description : inline-text option;
      language : string option;
    |)

  direct +Chapter : [(int list) option; int; inline-text; block-text] block-cmd
  direct +Separator : [] block-cmd
  direct +PartTitle : [inline-text] block-cmd
  direct \strong : [inline-text] inline-cmd
  direct \emph : [inline-text] inline-cmd
  direct \strike : [inline-text] inline-cmd
  direct +block-quote : [block-text] block-cmd
  direct +heading : [int; inline-text] block-cmd
  direct +p : [inline-text] block-cmd
  direct \p : [inline-text] inline-cmd
  direct +code : [string] block-cmd
  direct \code : [string] inline-cmd
  direct +code-block : [string] block-cmd
  direct \code-block : [string] inline-cmd
  direct \href : [string; inline-text] inline-cmd
  direct \img : [string; inline-text] inline-cmd
  direct +img : [inline-text option; string] block-cmd
  direct \footnote : [string] inline-cmd
  direct +add-footnote : [string; inline-text] block-cmd
  direct +rule : [] block-cmd
  direct \task-list-marker : [bool] inline-cmd
  direct \item : [inline-text] inline-cmd
  direct \listing : [inline-text list] inline-cmd
  direct +listing : [inline-text list] block-cmd
  direct \enumerate : [int; inline-text list] inline-cmd
  direct +enumerate : [int; inline-text list] block-cmd
  direct +table : [block-text] block-cmd
  direct +thead : [block-text] block-cmd
  direct +tbody : [block-text list] block-cmd
  direct +tr : [inline-text list] block-cmd
  direct \th : [string option; inline-text] inline-cmd
  direct \td : [string option; inline-text] inline-cmd
  direct \ruby : [inline-text] inline-cmd
  direct \rp : [inline-text] inline-cmd
  direct \rt : [inline-text] inline-cmd
  direct \sup : [inline-text] inline-cmd
  direct \sub : [inline-text] inline-cmd
  direct \small : [inline-text] inline-cmd
  direct \cite : [inline-text] inline-cmd
  direct \q : [inline-text] inline-cmd
  direct \dfn : [inline-text] inline-cmd
  direct \abbr : [inline-text option; inline-text] inline-cmd

end = struct


let font-ratio-latin = 1.0
let font-ratio-cjk = 0.95

let font-latin-roman = (`fonts-noto-serif:NotoSerif-Regular`, font-ratio-latin, 0.)
let font-latin-bold = (`fonts-noto-serif:NotoSerif-Bold`, font-ratio-latin, 0.)
let font-latin-italic = (`fonts-noto-serif:NotoSerif-Italic`, font-ratio-latin, 0.)
let font-latin-bold-italic = (`fonts-noto-serif:NotoSerif-BoldItalic`, font-ratio-latin, 0.)
let font-latin-sans = (`fonts-noto-sans:NotoSans-Regular`, font-ratio-latin, 0.)
let font-latin-mono = (`fonts-dejavu:DejaVuSansMono`, font-ratio-latin, 0.)
let font-cjk-mincho = (`fonts-noto-serif-cjk-jp:NotoSerifCJKjp-Regular`, font-ratio-cjk, 0.)
let font-cjk-gothic = (`fonts-noto-sans-cjk-jp:NotoSansCJKjp-Regular`, font-ratio-cjk, 0.)


let set-cjk-font font-name ctx =
  ctx |> set-font HanIdeographic font-name
      |> set-font Kana font-name

let set-latin-font font-name ctx =
  ctx |> set-font Latin font-name


let set-code-font ctx =
  ctx |> set-latin-font font-latin-mono
      |> set-cjk-font font-cjk-gothic
      |> set-hyphen-penalty 100000



let font-size-normal = 12pt
let line-feed-size = 8pt
let paragraph-margin = 14pt
let page-width = 210mm
let page-height = 297mm
let top-space = 20mm
let bottom-space = 20mm
let left-space = (page-width -' ((font-size-normal *' font-ratio-cjk) *' 40.0)) *' 0.5
let right-space = (page-width -' ((font-size-normal *' font-ratio-cjk) *' 40.0)) *' 0.5
let text-width = page-width -' left-space -' right-space


let ctx-get-initial-context l-width =
  get-initial-context l-width (command \math)
    |> set-font-size font-size-normal
    |> set-dominant-wide-script Kana
    |> set-language Kana Japanese
    |> set-language HanIdeographic Japanese
    |> set-cjk-font font-cjk-mincho
    |> set-dominant-narrow-script Latin
    |> set-language Latin English
    |> set-latin-font font-latin-roman
    |> set-hyphen-penalty 100
    |> set-math-font `lmodern`
    |> set-manual-rising 0pt % 文字の上下の補正値
    |> set-text-color Color.black
    |> set-leading line-feed-size
    |> set-min-gap-of-lines line-feed-size
    |> set-paragraph-margin paragraph-margin paragraph-margin



let register-cross-reference-num label title =
  register-cross-reference (label ^ `-num`) title


let register-cross-reference-page label =
  hook-page-break (fun pbinfo _ -> register-cross-reference (label ^ `-page`) (arabic pbinfo#page-number))


let get-cross-reference-num label =
match get-cross-reference (label ^ `-num`) with
  | None -> `?`
  | Some (title) -> title

let get-cross-reference-page label =
match get-cross-reference (label ^ `-page`) with
  | None -> `?`
  | Some (title) -> title


let register-location-frame key ib =
  inline-frame-breakable (0pt, 0pt, 0pt, 0pt)
    (Annot.register-location-frame key) ib

let link-to-location-frame key ib =
  inline-frame-breakable (0pt, 0pt, 0pt, 0pt)
    (Annot.link-to-location-frame key (Some(0.5pt, Color.blue))) ib



let-mutable footnote-lst <- []
let-mutable footnote-num <- 0

let-block ctx +add-footnote key text =
  let () = footnote-lst <- (key, text)::!footnote-lst in
  block-nil

let-inline ctx \footnote key =
  let () = footnote-num <- !footnote-num + 1 in
  let () = register-cross-reference-num (`footnote-`^key) (arabic !footnote-num) in
  let font-size = get-font-size ctx in
  let num-ib =
    let it-num = embed-string (arabic !footnote-num) in
    let ctx =
      ctx
      |> set-font-size (font-size *' 0.75)
      |> set-manual-rising (font-size *' 0.25)
    in
      read-inline ctx {†#it-num;}
  in
  num-ib
  |> register-location-frame (`footnote-num`^key)
  |> link-to-location-frame (`footnote-body`^key)


let-inline \href link it = {\href ?:((0.5pt, Color.red)) (link)(it);}


let-inline \strike it = {\midline{#it;}}

let-mutable is-emph <- false

let-inline ctx \emph it =
  let () = is-emph <- true in
  let _ = read-inline ctx it in
  let ctx =
      ctx
      |> set-cjk-font font-cjk-mincho
      |> set-latin-font font-latin-italic
  in
  let ib = read-inline ctx it in
  let () = is-emph <- false in
  ib


let-inline ctx \strong it =
  let ctx =
    if !is-emph then
      ctx
      |> set-cjk-font font-cjk-gothic
      |> set-latin-font font-latin-bold-italic
    else
      ctx
      |> set-cjk-font font-cjk-gothic
      |> set-latin-font font-latin-bold
  in
  read-inline ctx it



let-block ctx +block-quote bt =
  let f ctx =
    let font-size = get-font-size ctx in
    let (_,r,_) = get-font HanIdeographic ctx in
    let pads = ((font-size *' r) *' 1.5, 5pt, 5pt, 5pt) in
    let pad = font-size *' r in
    let decoset =
      let back-color = Color.gray 0.9 in
      let back-gr x y w h d =
        fill back-color (Gr.rectangle (x +' pad, y -'d) (x +' w, y +' h))
      in
      let stroke-gr x y w h d =
        stroke 1.5pt Color.black
          (Gr.line (x +' pad, y -' d) (x +' pad, y +' h))
      in
      let deco (x, y) w h d =
        [
          back-gr x y w h d;
          stroke-gr x y w h d;
        ]
      in
      (deco, deco, deco, deco)
    in
    (pads, decoset)
  in
  Quotation.quotation-scheme ctx (Some f) None None bt



let indent ctx = inline-skip ((get-font-size ctx) *' font-ratio-cjk)


let-block ctx +p inner =
  let ib-indent = indent ctx in
  let ib-inner = read-inline ctx inner in
    line-break true true ctx (ib-indent ++ ib-inner ++ inline-fil)

let-inline \p inner = {#inner;}



let-block ctx +rule =
  let line = Gr.line (0pt,0pt) (text-width *' 0.95,0pt) in
  let thick = 1.0pt in
  let ib =
    inline-graphics (text-width *' 0.95) thick 0pt (fun pt -> (
      [line |> shift-path pt |> stroke thick (Color.gray 0.4)]
    ))
  in
  line-break true true ctx (inline-fil ++ ib ++ inline-fil)



let-block ctx +code-block code =
  let pads = (5pt, 5pt, 5pt, 5pt) in
  let decoset = VDecoSet.simple-frame 1pt (Color.gray 0.5) (Color.gray 0.85) in
  let f ctx =
    let ctx =
      ctx
      |> set-code-font
      |> set-paragraph-margin 4pt 4pt
      |> set-font-size 10pt
    in
    let char-width = {0} |> read-inline ctx |> get-natural-width in
    let code-lst =
      code
      |> split-into-lines
      |> List.tail
      |> Option.unwrap-or([])
    in
      code-lst
      |> List.map (fun (i, s) -> (
        let ib =
          inline-skip (char-width *' (float i))
          ++ read-inline ctx (embed-string s)
          ++ inline-fil
        in
        line-break true true ctx ib
      ))
      |> List.fold-left (+++) block-nil
  in
  block-frame-breakable ctx pads decoset f


let-inline ctx \code-block code =
  let bt = '<+code-block(code);> in
  let bb = read-block ctx bt in
  inline-fil ++ embed-block-breakable ctx bb ++ inline-fil



let-inline ctx \code code =
  let pads = (2pt, 2pt, 2pt, 2pt) in
  let decoset =
    let back-gr x y w h d =
      fill (Color.gray 0.85) (Gr.rectangle (x, y -'d) (x +' w, y +' h))
    in
    let deco (x, y) w h d =
      [
        back-gr x y w h d;
      ]
    in
      (deco, deco, deco, deco)
  in
  let ctx = set-code-font ctx in
  let ib =
    code
    |> embed-string
    |> read-inline ctx
    |> inline-frame-breakable pads decoset
  in
  script-guard Latin ib


let-block ctx +code code =
  let it = {\code(code);} in
  let ib = read-inline ctx it ++ inline-fil in
  line-break true true ctx ib



let-block ctx +heading n title =
  let font-size =
    match n with
    | 1 -> 23pt
    | 2 -> 20pt
    | 3 -> 18pt
    | _ -> 15pt
  in
  let ctx =
    ctx
      |> set-font-size font-size
      |> set-cjk-font font-cjk-gothic
      |> set-latin-font font-latin-sans
      |> set-paragraph-margin 20pt 15pt
  in
  title
  |> read-inline ctx
  |> (fun ib -> ib ++ inline-fil)
  |> line-break true false ctx


let-mutable img-num <- 0
let-inline ctx \img path title =
  let () = img-num <- !img-num + 1 in
  let image = load-image path in
  let insert-image = use-image-by-width image (text-width *' 0.75) in
  let img-num-it = !img-num |> arabic |> embed-string in
  let fig-num-ib = read-inline ctx {fig#img-num-it;: #title;} in
  let fig-num-bb = line-break false true ctx (inline-fil ++ fig-num-ib ++ inline-fil) in
  let bb = (line-break true false ctx (inline-fil ++ insert-image ++ inline-fil)) +++ fig-num-bb in
  inline-fil ++ embed-block-breakable ctx bb ++ inline-fil


let-block ctx +img title-opt path =
  let () = img-num <- !img-num + 1 in
  let image = load-image path in
  let insert-image = use-image-by-width image (text-width *' 0.75) in
  let img-num-it = !img-num |> arabic |> embed-string in
  let fig-num-bb =
    match title-opt with
    | None -> block-nil
    | Some(title) -> (
      let fig-num-ib = read-inline ctx {fig#img-num-it;: #title;} in
      line-break false true ctx (inline-fil ++ fig-num-ib ++ inline-fil)
    )
  in
  let bb = (line-break true false ctx (inline-fil ++ insert-image ++ inline-fil)) +++ fig-num-bb in
  bb



let-mutable alignment-lst <- []
let-mutable alignment-len <- 0
let-mutable cell-lst <- []
let-mutable is-head <- false
let-block ctx +table bt =
  let () = is-head <- false in
  let () = alignment-lst <- [] in
  let () = cell-lst <- [] in
  let _ = read-block ctx bt in
  let it = {\easytable(List.reverse !alignment-lst)(List.reverse !cell-lst);} in
  let ib = read-inline ctx it in
  line-break true true ctx (inline-fil ++ ib ++ inline-fil)


let-block ctx +thead bt =
  let () = is-head <- true in
  let _ = read-block ctx bt in
  let () = is-head <- false in
  block-nil


let-block ctx +tbody lst =
  let () = is-head <- false in
  let _ = List.map (read-block ctx) lst in
  block-nil


let-block ctx +tr cell =
  if !is-head then
    let len = List.length cell in
    let () = alignment-len <- len in
    let _ = List.map (read-inline ctx) cell in
    block-nil
  else
    let-rec sub lst n =
      if n >= !alignment-len then
        match lst with
        | x::_ -> let _ = read-inline ctx x in ()
        | [] -> ()
      else
        match lst with
        | x::xs -> let _ = read-inline ctx x in sub xs (n + 1)
        | [] -> sub [] (n + 1)
    in
    let _ = sub cell 1 in
    block-nil


let-inline ctx \th alignment-opt it =
  let width = (text-width *' 0.8) *' (1.0 /. (float !alignment-len)) in
  let alignment =
    match alignment-opt with
    | Some(`left`) -> EasyTableAlias.lw width
    | Some(`center`) -> EasyTableAlias.cw width
    | Some(`right`) -> EasyTableAlias.rw width
    | _ -> EasyTableAlias.cw width
  in
  let () = alignment-lst <- alignment::!alignment-lst in
  let () = cell-lst <- it::!cell-lst in
  inline-nil


let-inline ctx \td alignment-opt it =
  let () = cell-lst <- it::!cell-lst in
  inline-nil


let minus = float (-1)

let default-listing ctx lst =
  let text-width = get-text-width ctx in
  let main-size = (get-font-size ctx) *' 0.5 in
  let gr-lst =
    match (List.length lst) mod 3 with
    | 1 ->
      [
        Gr.circle (main-size*'0.5,main-size*'0.5) (main-size *' 0.4)
        |> fill Color.black
      ]
    | 2 ->
      [
        Gr.polygon (0pt,0pt) [(main-size, main-size *' 0.5); (0pt, main-size)]
        |> fill Color.black
      ]
    | _ ->
      [
        Gr.polygon (main-size *' 0.5, main-size)
          [
            (0pt, main-size *' 0.5);
            (main-size *' 0.5, 0pt);
            (main-size, main-size *' 0.5);
          ]
        |> fill Color.black
      ]
  in
  let circle-ib =
    let main =
      inline-graphics main-size main-size 0pt
        (fun pt -> List.map (shift-graphics pt) gr-lst)
    in
      inline-skip 3pt ++ main ++ inline-skip 3pt
  in
    circle-ib


let default-enumerate plus ctx lst =
  let num-opt = List.head lst in
  let num-str =
    match num-opt with
    | None -> ` `
    | Some(n) -> `(` ^ arabic (n + plus - 1) ^ `)`
  in
  let title-ib =
    num-str |> embed-string |> read-inline ctx
  in
    inline-skip 3pt ++ title-ib ++ inline-skip 3pt


type t =
  | Nothing
  | Listing
  | Enumerate

let is-Nothing t =
  match t with
  | Nothing -> true
  | _ -> false

let equal-t t1 t2 =
  match (t1, t2) with
  | (Nothing,_) -> true
  | (_,Nothing) -> true
  | (Listing,Listing) -> true
  | (Enumerate,Enumerate) -> true
  | _ -> false


let-mutable t-ref <- Nothing

let-mutable count-lst <- []

let-mutable title-fun <- default-listing

let-mutable check-list-ref <- None


let-inline ctx \task-list-marker b =
  let () = check-list-ref <- Some(b) in
  inline-nil


let make-check-gr-lst main-font-size is-check =
  let thin = 0.5pt in
  let thick = 1.2pt in
  let color = Color.black in
  let square-path =
    Gr.rectangle (0pt, 0pt) (main-font-size *' 0.75, main-font-size *' 0.75 )
  in
  let check-path =
    Gr.poly-line (main-font-size *' (0.0 -. 0.15), main-font-size *' 0.55)
      [
        (main-font-size *' 0.15, main-font-size *' 0.15);
        (main-font-size *' 0.85, main-font-size *' 1.05)
      ]
  in
  if is-check then
    [stroke thin color square-path; stroke thick color check-path]
  else
    [stroke thin color square-path]


let-inline ctx \item inner =
  let ctx =
    ctx
    |> set-paragraph-margin 0pt 0pt
  in
  let inner-ib = read-inline ctx inner in
  let main-font-size = get-font-size ctx in
  let old-lst = !count-lst in
  let head =
    List.head old-lst |> Option.from 0
  in
  let tail-lst =
    List.tail old-lst |> Option.from []
  in
  let () = count-lst <- (head+1) :: tail-lst in
  let new-lst = !count-lst in
  let f = !title-fun in
  let check-lst-ib =
    match !check-list-ref with
      | None -> inline-nil
      | Some(b) -> (
        let check-gr-lst = make-check-gr-lst main-font-size b in
        let gr pt = List.map (shift-graphics pt) check-gr-lst in
        inline-graphics main-font-size main-font-size 0pt gr
      )
  in
  let title-ib = check-lst-ib ++ (f ctx new-lst) in
  let title-ib-width = get-natural-width title-ib in
  let make-main-bb ctx =
    inline-skip (title-ib-width *' minus) ++ title-ib ++ inner-ib ++ inline-fil
    |> line-break true true ctx
  in
  let deco-set = VDecoSet.empty in
  let pads = (title-ib-width, 0pt, 0pt, 0pt) in
  let main-bb = block-frame-breakable ctx pads deco-set make-main-bb in
  let () = check-list-ref <- None in
    inline-fil ++ embed-block-breakable ctx main-bb


let make-itemize ctx f change-bool itemize =
  let old-default-f = !title-fun in
  let old-default-lst = !count-lst in
  let () =
    if change-bool then
      count-lst <- 0::!count-lst
    else
      count-lst <- []
  in
  let () = title-fun <- f in
  let make-bb it =
    let ctx =
      ctx
      |> set-paragraph-margin 0pt 0pt
    in
    let ib = read-inline ctx it in
    ib ++ inline-fil
    |> line-break true true ctx
  in
  let main-bb =
    itemize
    |> List.map make-bb
    |> List.fold-left (+++) block-nil
  in
  let () = title-fun <- old-default-f in
  let () = count-lst <- old-default-lst in
  main-bb


let listing ctx itemize =
  let b = equal-t Listing !t-ref in
  let () = t-ref <- Listing in
  make-itemize ctx default-listing b itemize


let enumerate ctx n itemize =
  let b = equal-t Enumerate !t-ref in
  let () = t-ref <- Enumerate in
  make-itemize ctx (default-enumerate n) b itemize


let-block ctx +listing itemize =
  listing ctx itemize

let-inline ctx \listing itemize =
    inline-fil ++ embed-block-breakable ctx (listing ctx itemize)


let-block ctx +enumerate n itemize =
  enumerate ctx n itemize

let-inline ctx \enumerate n itemize =
    inline-fil ++ embed-block-breakable ctx (enumerate ctx n itemize)


let-mutable ruby-text <- {}
let-inline ctx \ruby it =
  let _ = read-inline ctx it in
  let ruby-str = !ruby-text |> read-inline ctx |> extract-string in
  let text = {\ruby ?:[Ruby.mode Ruby.g] [ruby-str] {|#it;|}} in
  let () = ruby-text <- {} in
  read-inline ctx text


let-inline ctx \rp _ = inline-nil

let-inline ctx \rt it =
  let () = ruby-text <- it in
  inline-nil


let-inline ctx \sup it =
  let font-size = get-font-size ctx in
  let ib =
    let ctx =
      ctx
      |> set-font-size (font-size *' 0.75)
      |> set-manual-rising (font-size *' 0.25)
    in
      read-inline ctx it
  in
  ib


let-inline ctx \sub it =
  let font-size = get-font-size ctx in
  let ib =
    let ctx =
      ctx
      |> set-font-size (font-size *' 0.75)
      |> set-manual-rising (font-size *' (0.25 *. (float (-1))))
    in
      read-inline ctx it
  in
  ib


let-inline ctx \small it =
  let fontsize = get-font-size ctx in
  let ctx =
    ctx |> set-font-size (fontsize *' 0.75)
  in
  read-inline ctx it


let-inline \cite it = it


let-inline \q it = {"#it;"}


let-inline ctx \dfn it =
  let ctx =
    ctx |> set-latin-font font-latin-bold
        |> set-cjk-font font-cjk-gothic
  in
  read-inline ctx it


let-inline ctx \abbr long-opt short =
  let ctx =
    ctx |> set-latin-font font-latin-italic
        |> set-cjk-font font-cjk-gothic
  in
  let it =
    match long-opt with
    | Some(long) -> {#short;(#long;)}
    | None -> short
  in
  read-inline ctx it


let-mutable outline-lst <- []
let-mutable toc-lst <- []
type toc-type =
  | Chapter of string * int * inline-text
  | PartTitle of inline-text * string
  | Separator

let-block ctx +Separator =
  let () = toc-lst <- Separator::!toc-lst in
  block-nil


let-mutable parttitle-num <- 0

let-block ctx +PartTitle it =
  let () = parttitle-num <- !parttitle-num + 1 in
  let label = `parttitle-`^(arabic !parttitle-num) in
  let () = toc-lst <- PartTitle(it, label)::!toc-lst in
  block-nil


let-mutable chapter-num <- 0

let-block ctx +Chapter numbers-opt depth title bt =
  let () = chapter-num <- !chapter-num + 1 in
  let label = `chapter-`^(arabic !chapter-num) in
  let s-num-opt =
    numbers-opt
    |> Option.map (fun ilst -> ilst |> List.map arabic |> List.fold-left (fun s1 s2 -> s1^s2^`.`) ` `)
  in
  let it-num-opt = s-num-opt |> Option.map(embed-string) in
  let toc-title =
    match it-num-opt with
    | Some(it-num) -> {#it-num; #title;}
    | None -> title
  in
  let () = toc-lst <- Chapter(label, depth, toc-title)::!toc-lst in
  let ibhook = register-cross-reference-page label in
  let title-ctx =
    ctx |> set-font-size 30pt
        |> set-latin-font font-latin-sans
        |> set-cjk-font font-cjk-gothic
        |> set-paragraph-margin 8pt 45pt
  in
  let ib-num =
    match it-num-opt with
      | Some(it-num) -> read-inline title-ctx it-num ++ inline-skip 15pt
      | None -> inline-nil
  in
  let ib-num-width = get-natural-width ib-num in
  let title-ib =
    ib-num ++ ibhook ++ (title |> read-inline title-ctx |> script-guard Latin) ++ inline-fil
    |> register-location-frame label
  in
  let title-str = extract-string title-ib in
  let title-bb =
    let pads = (ib-num-width, 0pt, 0pt, 0pt) in
    let decoset = VDecoSet.empty in
    block-frame-breakable title-ctx pads decoset (fun ctx -> (
        line-break true false ctx (inline-skip (ib-num-width *' (float (-1))) ++ title-ib)
      ))
  in
  let () = outline-lst <- (depth, title-str, label, depth < 1)::!outline-lst in
  let bb = read-block ctx bt in
  let rev-footnote-lst = List.reverse !footnote-lst in
  let footnote-block =
    rev-footnote-lst
    |> List.map (fun (key, it) -> (
      let ib =
      it
      |> read-inline ctx
      in
      let footnote-num-str = get-cross-reference-num (`footnote-`^key) in
      let footnote-num-ib =
        (footnote-num-str ^ `:`)
        |> embed-string
        |> read-inline ctx
        |> register-location-frame (`footnote-body`^key)
        |> link-to-location-frame (`footnote-num`^key)
      in
      %inline-skip (num-width *' (float (-1)))
      let num-width = get-natural-width footnote-num-ib +' 5pt in
      let main-ib = footnote-num-ib ++ inline-skip 5pt ++ (script-guard Latin ib) in
      (num-width, main-ib)
    ))
    |> List.map (fun (num-width, main-ib) -> (
      let pads = (num-width +' 5pt, 5pt, 5pt, 5pt) in
      let decoset = VDecoSet.empty in
      block-frame-breakable ctx pads decoset (fun ctx -> (
        let space = inline-skip (num-width *' (float (-1))) in
          line-break true true ctx (space ++ main-ib ++ inline-fil)
      ))
    ))
    |> List.fold-left (+++) block-nil
  in
  let rule-block =
    if List.length rev-footnote-lst == 0 then
      block-nil
    else
      let line = Gr.line (0pt,0pt) (text-width *' 0.6,0pt) in
      let thick = 1.0pt in
      let ib =
        inline-graphics (text-width *' 0.6) thick 0pt (fun pt -> (
          [line |> shift-path pt |> stroke thick (Color.gray 0.4)]
        ))
    in
    line-break true true ctx (ib ++ inline-fil)
  in
  let () = footnote-lst <- [] in
  clear-page +++ title-bb +++ bb +++ rule-block +++ footnote-block



let make-toc-Separator ctx =
  let line = Gr.line (0pt,0pt) (text-width *' 0.9,0pt) in
  let thick = 1.0pt in
  let ib =
    inline-graphics (text-width *' 0.9) thick 0pt (fun pt -> (
      [line |> shift-path pt |> stroke thick (Color.gray 0.4)]
    ))
  in
  line-break true true ctx (inline-fil ++ ib ++ inline-fil)

let toc-PartTitle-font-size = 15pt

let make-toc-PartTitle ctx title =
  let ctx =
    ctx |> set-font-size toc-PartTitle-font-size
        |> set-latin-font font-latin-sans
        |> set-cjk-font font-cjk-gothic
        |> set-paragraph-margin (paragraph-margin *' 1.3) paragraph-margin
  in
  let ib-title = read-inline ctx title in
  let ib = ib-title ++ inline-fil in
  line-break true false ctx ib


let-rec ib-repeat-inline n ib =
  if n <= 0 then inline-nil else
    ib ++ (ib-repeat-inline (n - 1) ib)

let ib-make-dots-line ctx text-width =
  let ib = read-inline ctx {.} ++ inline-skip 1pt in
  let n = round (text-width /' (get-natural-width ib)) in
    ib-repeat-inline n ib ++ inline-fil

let toc-Chapter-font-size = font-size-normal

let make-toc-Chapter ctx label depth title page-str =
  let ctx =
    ctx |> set-font-size toc-Chapter-font-size
        |> set-latin-font font-latin-roman
        |> set-cjk-font font-cjk-mincho
  in
  let text-width = get-text-width ctx in
  let ib-title = read-inline ctx title in
  let ib-page =
    page-str
    |> embed-string
    |> read-inline ctx
  in
  match depth with
  | 0 -> (
    let ib = inline-skip toc-PartTitle-font-size ++ ib-title ++ inline-fil ++ ib-page in
    line-break true true ctx (link-to-location-frame label ib)
  )
  | x when x <= 2 -> (
    let indent = toc-Chapter-font-size *' (float x) in
    let dots-width =
      text-width
        -' (get-natural-width (ib-title ++ ib-page))
        -' toc-PartTitle-font-size
        -' indent
    in
    let ib =
      inline-skip toc-PartTitle-font-size
        ++ inline-skip indent
        ++ ib-title ++ inline-fil
        ++ (ib-make-dots-line ctx dots-width)
        ++ inline-fil ++ ib-page
    in
    line-break true true ctx (link-to-location-frame label ib)
  )
  | _ -> block-nil

let document record inner =
  let ctx-doc = ctx-get-initial-context text-width in
  let bb-main = read-block ctx-doc inner in

  let page = UserDefinedPaper(page-width, page-height) in

  let title = record#title in
  let author-lst = record#authors in
  let description-opt = record#description in
  let language-opt = record#language in


  let title-bb =
    let ctx =
      ctx-doc
      |> set-font-size 33pt
      |> set-latin-font font-latin-sans
      |> set-cjk-font font-cjk-gothic
    in
    let title-ib = read-inline ctx title in
      line-break true false ctx (title-ib ++ inline-fil)
  in


  let author-bb =
    let ctx =
      ctx-doc
      |> set-font-size 17pt
      |> set-latin-font font-latin-sans
      |> set-cjk-font font-cjk-gothic
    in
    let it =
      author-lst
      |> List.fold-lefti (fun i it1 it2 -> (
        if i <= 0 then
          it2
        else
          {#it1;, #it2;}
      )) {}
    in
    let ib = read-inline ctx it in
    line-break false true ctx (ib ++ inline-fil)
  in


  let description-title =
    match language-opt with
    | Some(`ja`) -> {概要}
    | Some(`en`) -> {description}
    | _ -> {概要}
  in
  let description-bb =
    match description-opt with
    | None -> block-nil
    | Some(description) -> (
      let font-size = get-font-size ctx-doc in
      let pads = (font-size *' 4.0, font-size *' 4.0, 0pt, 0pt) in
      let description-bb =
        block-frame-breakable ctx-doc pads VDecoSet.empty (fun ctx -> (
          let description-ib = read-inline ctx description in
          line-break false true ctx description-ib
        ))
      in
      let title-ctx =
        ctx-doc
        |> set-latin-font font-latin-sans
        |> set-cjk-font font-cjk-gothic
      in
      let title-ib = read-inline title-ctx description-title in
      let title-bb =
        line-break true false title-ctx (inline-fil ++ title-ib ++ inline-fil)
      in
      title-bb +++ description-bb +++ block-skip 15pt
    )
  in


  let toc-title =
    match language-opt with
    | Some(`ja`) -> {目次}
    | Some(`en`) -> {Table of Contents}
    | _ -> {目次}
  in
  let toc-title-bb =
    let ctx =
      ctx-doc
      |> set-font-size 25pt
      |> set-latin-font font-latin-sans
      |> set-cjk-font font-cjk-gothic
      |> set-paragraph-margin 8pt 45pt
    in
    let ib = read-inline ctx toc-title in
    line-break true false ctx (ib ++ inline-fil)
  in

  let make-toc-fun toc =
    match toc with
    | Separator -> make-toc-Separator ctx-doc
    | PartTitle (title, label) -> make-toc-PartTitle ctx-doc title
    | Chapter (label, depth, title) -> (
      let page-str = get-cross-reference-page label in
      make-toc-Chapter ctx-doc label depth title page-str
    )
  in

  let bb-toc =
    !toc-lst
    |> List.reverse
    |> List.map make-toc-fun
    |> List.fold-left (+++) block-nil
  in

  let pagecontf pbinfo =
    (|
      text-height = page-height -' (top-space +' bottom-space);
      text-origin = (left-space, top-space);
    |)
  in

  let pagepartsf pbinfo =
    let page-num = embed-string (arabic pbinfo#page-number) in
    let ctx = set-paragraph-margin 0pt 0pt ctx-doc in
    let header = block-nil in
    let header-origin = (left-space, 0pt) in
    let footer =
      let footer-main = line-break true true ctx (inline-fil ++ (read-inline ctx {#page-num;}) ++ inline-fil)
      in
        block-skip (bottom-space *' 0.2) +++ footer-main
    in
    let footer-origin = (left-space, page-height -' bottom-space) in
    (|
      header-content = header;
      header-origin = header-origin;
      footer-content = footer;
      footer-origin = footer-origin;
    |)
  in
  let doc-main =
    page-break page pagecontf pagepartsf
      (title-bb +++ block-skip 5pt +++ author-bb +++ block-skip 5pt
        +++ description-bb +++ toc-title-bb +++ bb-toc +++ bb-main)
  in
  let () = register-outline (List.reverse !outline-lst) in
    doc-main

end

let document = MdBookSATySFi.document
